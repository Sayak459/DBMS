EMP Table:
create table emp2(
  EMPNO NUMBER(5) PRIMARY KEY,
  EMPNAME VARCHAR2(30),
  SALARY NUMBER(10),
  OFFICE VARCHAR2(20),
  EMPPOST VARCHAR2(20),
  HIRE DATE,
  GRADE NUMBER(1) CHECK (GRADE BETWEEN 1 AND 5)
);


create TABLE BONUS(
  BID NUMBER(5) PRIMARY KEY,
  BAMT NUMBER(10),
  EMPNO NUMBER(5),
  FOREIGN KEY (EMPNO) REFERENCES EMP2(EMPNO)
);


INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (1, 'John Doe', 50000, 'New York', 'Manager', TO_DATE('01-JAN-1981', 'DD-MON-YYYY'), 4);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (2, 'Jane Smith', 60000, 'Los Angeles', 'Developer', TO_DATE('15-FEB-1982', 'DD-MON-YYYY'), 3);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (3, 'Michael Johnson', 55000, 'Chicago', 'Analyst', TO_DATE('20-MAR-1981', 'DD-MON-YYYY'), 5);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (4, 'Emily Brown', 48000, 'Houston', 'Assistant', TO_DATE('10-APR-1983', 'DD-MON-YYYY'), 2);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (5, 'Christopher Lee', 52000, 'San Francisco', 'Designer', TO_DATE('05-MAY-1981', 'DD-MON-YYYY'), 4);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (6, 'Amanda Wilson', 58000, 'Seattle', 'Manager', TO_DATE('15-JUN-1984', 'DD-MON-YYYY'), 3);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (7, 'David Martinez', 51000, 'Boston', 'Developer', TO_DATE('25-JUL-1981', 'DD-MON-YYYY'), 5);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (8, 'Sarah Taylor', 53000, 'Miami', 'Analyst', TO_DATE('30-AUG-1985', 'DD-MON-YYYY'), 4);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (9, 'Daniel Anderson', 59000, 'Dallas', 'Assistant', TO_DATE('10-SEP-1981', 'DD-MON-YYYY'), 2);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (10, 'Jessica Garcia', 54000, 'Phoenix', 'Designer', TO_DATE('20-OCT-1986', 'DD-MON-YYYY'), 3);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (11, 'James Rodriguez', 56000, 'Atlanta', 'Manager', TO_DATE('01-NOV-1981', 'DD-MON-YYYY'), 4);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (12, 'Ashley Hernandez', 60000, 'Denver', 'Developer', TO_DATE('05-DEC-1987', 'DD-MON-YYYY'), 5);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (13, 'Matthew Lewis', 52000, 'Philadelphia', 'Analyst', TO_DATE('10-JAN-1981', 'DD-MON-YYYY'), 3);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (14, 'Olivia Clark', 57000, 'Detroit', 'Assistant', TO_DATE('15-FEB-1988', 'DD-MON-YYYY'), 4);
INSERT INTO emp2 (EMPNO, EMPNAME, SALARY, OFFICE, EMPPOST, HIRE, GRADE) VALUES (15, 'Ethan Adams', 58000, 'San Diego', 'Designer', TO_DATE('20-MAR-1981', 'DD-MON-YYYY'), 2);



Use this query to get the outputs on console:
SET SERVEROUTPUT ON

a. DECLARE
balance NUMBER(20) := &balance_input;
min_balance NUMBER(20) := 1000;
BEGIN 
IF balance < min_balance THEN
balance := balance - 100;
dbms_output.put_line('The Balance is: ' || balance);
END IF;
END;
/

b.DECLARE
  CURSOR emp_cursor IS
    SELECT SUBSTR(EMPNAME, 1, 3) AS v_first_char,
           EMPNO,
           EMPNAME AS NICKNAME,
           SALARY,
           OFFICE,
           EMPPOST,
           HIRE
    FROM emp2
    WHERE EXTRACT(YEAR FROM HIRE) = 1981;
  v_first_char VARCHAR2(3);
  empno NUMBER;
  nickname VARCHAR2(50);
  salary NUMBER;
  office VARCHAR2(50);
  emppost VARCHAR2(50);
  hire DATE;
BEGIN
  OPEN emp_cursor;
  LOOP
    FETCH emp_cursor INTO v_first_char, empno, nickname, salary, office, emppost, hire;
    EXIT WHEN emp_cursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('First character of employee name hired in 1981: ' || v_first_char);
    DBMS_OUTPUT.PUT_LINE('Employee No: ' || empno);
    DBMS_OUTPUT.PUT_LINE('Nickname: ' || nickname);
    DBMS_OUTPUT.PUT_LINE('Salary: ' || TO_CHAR(salary));
    DBMS_OUTPUT.PUT_LINE('Office: ' || office);
    DBMS_OUTPUT.PUT_LINE('Employee Position: ' || emppost);
    DBMS_OUTPUT.PUT_LINE('Hire Date: ' || TO_CHAR(hire, 'YYYY-MM-DD'));
    DBMS_OUTPUT.PUT_LINE('=====================================================================');
  END LOOP;
  CLOSE emp_cursor;
  IF emp_cursor%NOTFOUND THEN
    DBMS_OUTPUT.PUT_LINE('No Employees Hired in 1981');
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

c.DECLARE
CURSOR ename_details IS
  SELECT EMPNAME AS ENAME FROM (SELECT EMPNAME, SALARY, ROW_NUMBER() OVER (ORDER BY SALARY DESC) AS salary_rank FROM emp2) WHERE salary_rank <= 7;
ENAME VARCHAR2(30);
BEGIN
  DBMS_OUTPUT.PUT_LINE('7 Employees with maximum salary:') ;
  OPEN ename_details;
  LOOP
  FETCH ename_details INTO ENAME;
  EXIT WHEN ename_details%NOTFOUND;
  DBMS_OUTPUT.PUT_LINE(ENAME);
  END LOOP ;
  CLOSE ename_details;
END;
/

d. DECLARE
bonus_amt = 0.02;
BEGIN

e. DECLARE
min_salary NUMBER(10);
BEGIN
SELECT MIN(SALARY) INTO min_salary FROM EMP2 ;
FOR i IN 1..2 LOOP
IF i = 1 THEN
INSERT INTO EMP2 VALUES (16, 'Daniela Roger', min_salary, 'Boston', 'Salesperson', SYSDATE, 2);
ELSIF I = 2 THEN
INSERT INTO EMP2 VALUES (17, 'Lamserk Rooper', min_salary, 'Chicago', 'Manager', SYSDATE, 5);
END IF;
END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Data has been inserted successfully.') ;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM) ;
END;
/

f. DECLARE
  v_salary_hike_factor NUMBER;
BEGIN
  FOR emp_rec IN (SELECT EMPNO, SALARY, GRADE FROM emp2) LOOP
    CASE emp_rec.GRADE
      WHEN 1 THEN
        v_salary_hike_factor := 0.15; -- 15% salary hike for Grade 1
      WHEN 2 THEN
        v_salary_hike_factor := 0.12; -- 12% salary hike for Grade 2
      WHEN 3 THEN
        v_salary_hike_factor := 0.10; -- 10% salary hike for Grade 3
      WHEN 4 THEN
        v_salary_hike_factor := 0.10; -- 10% salary hike for Grade 4
      WHEN 5 THEN
        v_salary_hike_factor := 0.05; -- 5% salary hike for Grade 5
      ELSE
        v_salary_hike_factor := 0; -- No salary hike for unknown grade (should not happen based on schema)
    END CASE;
    UPDATE emp2
    SET SALARY = emp_rec.SALARY * (1 + v_salary_hike_factor)
    WHERE EMPNO = emp_rec.EMPNO;
  END LOOP;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Salary hike applied successfully based on employee grades.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

g. DECLARE
  v_salary_hike_factor NUMBER;
BEGIN
  BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE emp2 ADD (NEW_SALARY NUMBER(10,2), HIKE_DATE DATE)';
  EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE != -955 THEN
        RAISE;
      END IF;
  END;
  FOR emp_rec IN (SELECT EMPNO, SALARY, GRADE FROM emp2) LOOP
    CASE emp_rec.GRADE
      WHEN 1 THEN
        v_salary_hike_factor := 0.15;
      WHEN 2 THEN
        v_salary_hike_factor := 0.12;
      WHEN 3 THEN
        v_salary_hike_factor := 0.10;
      WHEN 4 THEN
        v_salary_hike_factor := 0.10;
      WHEN 5 THEN
        v_salary_hike_factor := 0.05;
      ELSE
        v_salary_hike_factor := 0;
    END CASE;
    UPDATE emp2
    SET NEW_SALARY = ROUND(emp_rec.SALARY * (1 + v_salary_hike_factor), 2),
        HIKE_DATE = SYSDATE
    WHERE EMPNO = emp_rec.EMPNO;
  END LOOP;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('New salary and hike date calculated and updated successfully.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/





DECLARE
  v_salary_hike_factor NUMBER;
BEGIN
  BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE emp2 ADD (NEW_SALARY NUMBER(10,2), HIKE_DATE DATE)';
  EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE != -955 THEN
        RAISE;
      END IF;
  END;
  FOR emp_rec IN (SELECT EMPNO, SALARY, GRADE FROM emp2) LOOP
    CASE emp_rec.GRADE
      WHEN 1 THEN
        v_salary_hike_factor := 0.15;
      WHEN 2 THEN
        v_salary_hike_factor := 0.12;
      WHEN 3 THEN
        v_salary_hike_factor := 0.10;
      WHEN 4 THEN
        v_salary_hike_factor := 0.10;
      WHEN 5 THEN
        v_salary_hike_factor := 0.05;
      ELSE
        v_salary_hike_factor := 0;
    END CASE;
    UPDATE emp2
    SET NEW_SALARY = ROUND(emp_rec.SALARY * (1 + v_salary_hike_factor), 2),
        HIKE_DATE = SYSDATE
    WHERE EMPNO = emp_rec.EMPNO;
  END LOOP;

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('New salary and hike date calculated and updated successfully.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/





DECLARE
v_salary_hike_factor NUMBER(2,5);
BEGIN
  BEGIN
      EXECUTE IMMEDIATE 'ALTER TABLE emp2 ADD (NEW_SALARY NUMBER(10,2), HIKE_DATE DATE)';
    EXCEPTION
      WHEN OTHERS THEN
        IF SQLCODE != -955 THEN
          RAISE;
        END IF;
    END;
  FOR emp_rec IN (SELECT EMPNO, SALARY, GRADE FROM emp2) LOOP
    CASE emp_rec.GRADE
      WHEN 1 THEN
        v_salary_hike_factor := 0.15;
      WHEN 2 THEN
        v_salary_hike_factor := 0.12;
      WHEN 3 THEN
        v_salary_hike_factor := 0.10;
      WHEN 4 THEN
        v_salary_hike_factor := 0.10;
      WHEN 5 THEN
        v_salary_hike_factor := 0.05;
      ELSE
        v_salary_hike_factor := 0;
    END CASE;
    UPDATE emp2
    SET NEW_SALARY = ROUND(emp_rec.SALARY * (1 + v_salary_hike_factor), 2),
        HIKE_DATE = SYSDATE
    WHERE EMPNO = emp_rec.EMPNO;
  END LOOP;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('New salary and hike date calculated and updated successfully.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/